#!/usr/bin/env python

import sys
import os
import numpy as np
from fdd_modules.fdd_directory import fdd_folders_set_up
from fdd_modules.fdd_run_vpfit import start_calculation
from fdd_modules.fdd_collect_results import collect_results
from fdd_modules.fdd_collect_results import get_default_fdds
from fdd_modules.fdd_plot import fdd_plot

from glob import glob

#==============================================================================================
# Welcome message
#==============================================================================================

def welcome_message():
    print ""
    print "=============================== fdd_checkup ======================================="
    print ""
    print " Usage:  fdd_checkup fort.26 [--param] [--options]"
    print ""
    print "==================================================================================="
    print ""
    print "          --param .... : Path to the file with fdd parameters to go through."
    print ""
    print " Optional arguments:"
    print "          --vp_setup . : Path to your vp_setup.dat file (default: './vp_setup.dat')"
    print "          --vpfit .... : Path to a custom vpfit exicutable or (default: 'vpfit')."
    print "          --cpu ...... : Number of CPUs to use (default: '1')."
    print "          --ions ..... : Number of 2 ions to collect results for."
    print "          --plot ..... : Create a plot with results."
    print "==================================================================================="
    print ""

#==============================================================================================
# Checking command line arguments
#==============================================================================================
# Check if something was specified and pick the path to the fort.26 file
try:
    if os.path.isfile(sys.argv[1]):
        fort_path = sys.argv[1]
    else:
        print ""
        print "", sys.argv[1], 'is not a file!'
        print ""
except IndexError:
    # If nothing was specified, print the welcome message out
    welcome_message()
    quit()

#----------------------------------------------------------------------------------------------
# Pick the fdd parameters and create a dictionary
try:
    if sys.argv[2] == '--param':
        fdd_param = dict()
        with open(sys.argv[3],'r') as param:
            param = [line.split() for line in param.read().split('\n')]
        # delete the last empty line
        if param[-1] == []:
            del(param[-1])
        for line in param:
            if line[0] == 'fdzstep':
                fdd_param['fdzstep'] = map(float,[line[1],line[2],line[3]])
            elif line[0] == 'fdclog':
                fdd_param['fdclog'] = map(float,[line[1],line[2],line[3]])
            elif line[0] == 'fdbstep':
                fdd_param['fdbstep'] = map(float,[line[1],line[2],line[3]])
            elif line[0] == 'fd4vst':
                fdd_param['fd4vst'] = map(float,[line[1],line[2],line[3]])
            else:
                print ""
                print "", line[0], "is unknown vpfit's fdd parameter!"
                print " Must be one of these: 'fdzstep', 'fdclog', fdbstep' or 'fd4vst'."
                print ""
    else:
        welcome_message()
        quit()
except IndexError:
    welcome_message()
    quit()

#----------------------------------------------------------------------------------------------
# Determine the fdds to test using specified range and step
# The values of fdds are taken to be equally destributed in log10 space
for key in fdd_param.keys():
    key_range = fdd_param[key]
    fdd_min = key_range[0]
    fdd_max = key_range[1]
    n_steps = key_range[2]
    step = (np.log10(fdd_max)-np.log10(fdd_min))/(n_steps-1.0)
    fdd_param[key] = [fdd_min]
    for i in range(1,int(n_steps)):
        fdd_param[key].append(10.0**(np.log10(fdd_param[key][i-1])+step))

#----------------------------------------------------------------------------------------------
# look for settings in command line ('--vp_setup', '--vpfit', '--cpu')
vp_setup_path = None
vpfit_path = None
n_cpu = None
for i in range(len(sys.argv)):
    if sys.argv[i] == '--vp_setup':
        vp_setup_path = sys.argv[i+1]
    elif sys.argv[i] == '--vpfit':
        vpfit_path = sys.argv[i+1]
    elif sys.argv[i] == '--cpu':
        n_cpu = int(sys.argv[i+1])
    elif sys.argv[i] == '--ions':
        ion1,ion2 = int(sys.argv[i+1]),int(sys.argv[i+2])
    else:
        pass

#----------------------------------------------------------------------------------------------
# Use the default settings if not specified

# if '--vp_setup' was not specified, use the default one
if vp_setup_path != None and os.path.isfile(vp_setup_path):
    pass
elif vp_setup_path == None and os.path.isfile('./vp_setup.dat'):
    vp_setup_path = './vp_setup.dat'
else:
    print ""
    print " 'vp_setup.dat' file was not specified and is not in the working directory!"
    print ""
    quit()

# if '--vpfit' was not specified, use the default one
if vpfit_path == None:
    vpfit_path = 'vpfit'
else:
    pass

# if '--cpu' was not specified, use the default one
if n_cpu == None:
    n_cpu = 1
    print "\n No CPUs were specified, 1 used!\n"
else:
    pass


#==============================================================================================
# Calling modules
#==============================================================================================

#----------------------------------------------------------------------------------------------
# Create a net of directories with vp_setup.dat files

if '--plot' not in sys.argv:
    fdd_folders_set_up(fdd_param,vp_setup_path)
    print " The directory tree has been created!"
else: pass
#----------------------------------------------------------------------------------------------
# Run vpfit from each of the directory with each of the vp_setup file


# list of pathes to all the directories to run VPFIT from
path_list = []
for key in fdd_param.keys():
    path_list = path_list + glob('./{}/*'.format(key))
# Get absolute path
abs_path_list = map(os.path.abspath,path_list)

# Run VPFITing's
if '--plot' not in sys.argv:
    print " Start calculation..."
    start_calculation(vpfit_path,fort_path,abs_path_list,n_cpu)
else: pass

#----------------------------------------------------------------------------------------------
# Collect results of calculation from f26 files
result_file_list = [key+'_results.dat' for key in fdd_param.keys()] # list of files to save the results in

if '--plot' not in sys.argv:
    print " Collecting results of calculations for {:d} and {:d} ions...".format(ion1,ion2)
    collect_results(result_file_list,abs_path_list,fort_path,ion1,ion2)
else: pass
#----------------------------------------------------------------------------------------------
# Plot results from the result_file_name file if '--plot' was specified

# Plot
if '--plot' in sys.argv:
    # Get defauls fdds
    default_fdds = get_default_fdds(vp_setup_path)
    print " Plotting..."
    print "  Default FDDs:", default_fdds
    fdd_plot(result_file_list,default_fdds)
else:
    pass

# All done!
print " All done!"
